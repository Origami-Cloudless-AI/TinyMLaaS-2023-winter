# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/tcp_hello_observer.ipynb.

# %% auto 0
__all__ = ['TcpHelloObserver']

# %% ../nbs/tcp_hello_observer.ipynb 2
import asyncio # tcp server

# %% ../nbs/tcp_hello_observer.ipynb 3
class TcpHelloObserver:

    def __init__(self):
        self.x = []
        self.y = []
        self.server = None
        self.__connected = False
    
    def parse_num(num_str : str):
        """Parses a number from a string in the format used by hello_world. The base of the exponentation is always assumed to be 2 and not parsed.
        The exponent must be an integer.
        """
        base = num_str[:num_str.find('*')]
        exponent = num_str[num_str.find('^')+1:]
        return float(base) * (2 ** int(exponent))

    def parse_data(message : str):
        "Returns float (x,y) pair from `message` which follows formatting used by hello_world"
        parts = message.split(' ')
        return (TcpHelloObserver.parse_num(parts[1][:-1]), TcpHelloObserver.parse_num(parts[3]))

    async def __handle_connection(self, reader, writer):
        "Handles an incoming tcp connection by reading lines, parsing them and storing the x and y values"
        self.__connected = True
        while True:
            data = await reader.readline()
            if not data:
                break

            message = data.decode()
            if len(message) > 2: # if not an empty line
                point = TcpHelloObserver.parse_data(message)
                self.x.append(point[0])
                self.y.append(point[1])
            
            await asyncio.sleep(0) # pass control to main
        self.__connected = False

    async def start_server(self, hostname : str, portnum : int):
        "Sets up a server"
        self.server = await asyncio.start_server(
                self.__handle_connection, hostname, portnum)

    async def serve_connection(self):
        "Tries to start a connection with client if one doesn't exist"
        await self.server.start_serving()

    def is_connected(self):
        "Returns true if a client is connected"
        return self.__connected

